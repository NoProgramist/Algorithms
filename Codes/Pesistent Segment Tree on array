#define _CRT_SECURE_NO_WARNINGS
#define _SCL_SECURE_NO_WARNINGS

#include <iostream>
#include <sstream>
#include <iomanip>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <cctype>
#include <cstring>
#include <vector>
#include <list>
#include <queue>
#include <deque>
#include <stack>
#include <map>
#include <set>
#include <algorithm>
#include <iterator>
#include <bitset>
#include <ctime>

#pragma comment(linker, "/STACK:36777216")
#define mp make_pair
#define pb push_back
#define x first
#define y second
#define pii pair<int,int>
#define pdd pair<double,double>
#define FOR(i,a,b) for (int _n(b), i(a); i <= _n; ++i)
#define FORD(i,a,b) for(int i=(a),_b=(b);i >= _b; --i)
#define all(c) (c).begin(), (c).end()
#define SORT(c) sort(all(c))
#define rep(i,n) FOR(i,0,(n)-1)
#define VI vector <int>
#define ll long long
#define sqr(x) ((x)*(x))

int ddx[] = { -1, -1, -1, 0, 0, 1, 1, 1 };
int ddy[] = { -1, 0, 1, -1, 1, -1, 0, 1 };
int dx[] = { -1, 1, 0, 0 };
int dy[] = { 0, 0, -1, 1 };

using namespace std;

#define MOD 1000000007
#define R2 500000004
#define R3 333333336
#define INF 1000000000
#define EPS 1e-6
#define PI 3.1415926535897932384626433832795028841971
#define MAX 100010
using namespace std;


int SIZE;
int L[MAX << 5];
int R[MAX << 5];
int VAL[MAX << 5];


int Add(int l, int r)
{
	L[SIZE] = l;
	R[SIZE] = r;
	VAL[SIZE] = VAL[l] + VAL[r];
	return SIZE++;
}

int Add(int val)
{
	VAL[SIZE] = val;
	return SIZE++;
}

int Build(int tl, int tr)
{
	if (tl == tr)return Add(0);
	int tm = tl + tr >> 1;
	return Add(Build(tl, tm), Build(tm + 1, tr));	
}

int GetSum(int v, int tl, int tr, int l, int r)
{
	if (l > r)return 0;
	if (tl == l && r == tr)return VAL[v];
	int tm = tl + tr >> 1;
	return GetSum(L[v], tl, tm, l, min(r, tm)) + GetSum(R[v], tm + 1, tr, max(tm + 1, l), r);
}

int Update(int v, int tl, int tr, int pos, int val)
{
	if (tl == tr)return Add(val);
	int tm = tl + tr >> 1;	
	return pos <= tm ? Add(Update(L[v], tl, tm, pos, val), R[v])
			 : Add(L[v], Update(R[v], tm + 1, tr, pos, val));
}

pii a[MAX];
pii b[MAX];
int v[MAX];

int main()
{
	ios_base::sync_with_stdio(0);
	string s;
	int n, m;
	cin >> n >> m;
	rep(i, n)
	{
		cin >> a[i].x;
		a[i].y = i;
	}
	sort(a, a + n);
	v[0] = Build(0, n - 1);
	rep(i, n)
		v[i + 1] = Update(v[i], 0, n - 1, a[i].y, 1);
	rep(i, m)
	{
		int l, r, k;
		cin >> l >> r >> k;
		--l, --r;
		int L = 0;
		int R = n;
		while (R - L > 1)			
			(GetSum(v[L + R >> 1], 0, n - 1, l, r) >= k ? R : L) = L + R >> 1;
		cout << a[R-1].x << '\n';
	}

	return 0;
}
