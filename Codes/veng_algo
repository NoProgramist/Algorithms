#define _CRT_SECURE_NO_WARNINGS
#pragma comment(linker, "/STACK:133217728")
#include <iostream>
#include <sstream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <cctype>
#include <cstring>
#include <vector>
#include <list>
#include <queue>
#include <deque>
#include <stack>
#include <map>
#include <set>
#include <algorithm>
using namespace std;

typedef pair<int, int> PII;
typedef pair<long long, long long> PLL;
typedef vector<int> VI;

#define FOR(i, a, b) for(int i = (a); i < (b); ++i)
#define RFOR(i, a, b) for(int i = (a) - 1; i >= (b); --i)
#define ALL(a) (a).begin(),(a).end()
#define PB push_back
#define MP make_pair
#define pi acos(-1.0)

const int MOD = 1000000007;
const int INF = 10000;
const int MAX = 50;

string word;
string cube[MAX];

int c[MAX+1][MAX+1];
int n;

int main()
{
	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);

	cin >> n;
	cin >> word;
	FOR(i, 0, n)
		cin >> cube[i];

	FOR(i,1,n+1)
		FOR(j, 1, n + 1)
		{
			c[i][j] = INF;
			if (cube[i-1][5] == word[j-1]) c[i][j] = 2 + abs(i - j);
			if (cube[i-1][1] == word[j-1] ||
				cube[i-1][2] == word[j-1] ||
				cube[i-1][3] == word[j-1] ||
				cube[i-1][4] == word[j-1]) c[i][j] = 1 + abs(i - j);
			if (cube[i-1][0] == word[j-1]) c[i][j] = abs(i - j);
		}

	vector<long long> u(n + 1), v(n + 1), p(n + 1), way(n + 1);
	for (int i = 1; i <= n; ++i) {
		p[0] = i;
		int j0 = 0;
		vector<int> minv(n + 1, INF+1);
		vector<char> used(n + 1, false);
		do {
			used[j0] = true;
			int i0 = p[j0], delta = INF+1, j1=-1;
			for (int j = 1; j <= n; ++j)
				if (!used[j]) {
					int cur = c[i0][j] - u[i0] - v[j];
					if (cur < minv[j])
						minv[j] = cur, way[j] = j0;
					if (minv[j] < delta)
						delta = minv[j], j1 = j;
				}
			for (int j = 0; j <= n; ++j)
				if (used[j])
					u[p[j]] += delta, v[j] -= delta;
				else
					minv[j] -= delta;
			j0 = j1;
		} while (p[j0] != 0);
		do {
			int j1 = way[j0];
			p[j0] = p[j1];
			j0 = j1;
		} while (j0);
	}
	
	if (-v[0] >= INF)
		cout << -1 << endl;
	else
	cout << -v[0] << endl;

	return 0;
}
